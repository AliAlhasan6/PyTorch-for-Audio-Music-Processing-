import torch
from main import FeedForwardNet, download_mnist_dataset

class_mapping = [
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
   ]


def predict(model, input, target, class_mapping):
    model.eval()
    # we use it every time we need validation or inference
    with torch.no_grad():
        predictions = model(input)
        # Tensor (1, 10) -> [[0.1, 0.01, ......, 0.6]]
        predicted_index = predictions[0].argmax(0)  # get the index with the highest value
        predicted = class_mapping[predicted_index]
        expected = class_mapping[target]
        return predicted, expected


if __name__ == "__main__":
    # load back the model
    feed_forward_net = FeedForwardNet()
    state_dict = torch.load("feedforwardnet.pth")
    feed_forward_net.load_state_dict(state_dict)

    # load MNIST validation dataset
    _, validation_data = download_mnist_dataset()

    # get a sample from the validation dataset for inference
    input, target = validation_data[0][0], validation_data[0][1]
    # for the input [0] first sample to [0] represent that we want the input connected to the initial value
    # for the target [0] first sample to [1] represent that we want target the initial  sample

    # make an inference
    predicted, expected = predict(feed_forward_net, input, target, class_mapping)
    print(f"Predicted: '{predicted}', expected: '{expected}'")
