import torch
import torchaudio
from torch import nn
from torch.utils.data import DataLoader
from urbansounddataset import UrbanSoundDataset
from CNN import CNNNetwork

BATCH_SIZE = 128
EPOCSH = 10
LEARNING_RATE = 0.001
ANNOTATIONS_FILE = "/home/ali/dataset/Urban/UrbanSound8K/metadata/UrbanSound8K.csv"
AUDIO_DIR = "/home/ali/dataset/Urban/UrbanSound8K/audio"

SAMPLE_RATE = 22050  # 1 second of audio
NUM_SAMPLES = 22050


def create_data_loader(train_data, batch_size):
    train_data_loader = DataLoader(train_data, batch_size=batch_size)
    return train_data_loader


def train_one_epoch(model, data_loader, loss_fn, optimiser, device):
    for input, target in data_loader:
        input, target = input.to(device), target.to(device)

        # calculate loss
        prediction = model(input)
        loss = loss_fn(prediction, target)

        # back-propagate lose and update wight
        optimiser.zero_grad()
        loss.backward()
        optimiser.step()
    print(f"loss: {loss.item()}")


def train(model, data_loader, loss_fn, optimiser, device, epochs):
    for i in range(epochs):
        print(f"Epoch{i + 1}")
        train_one_epoch(model, data_loader, loss_fn, optimiser, device)
        print("------------------------")
    print("Training is done.")


if __name__ == "__main__":
    # build model
    if torch.cuda.is_available():
        device = "cuda"
    else:
        device = "cpu"
    print(f"Using {device} device")
    # instantiating our dataset dataset and create data loader
    mel_spectrogram = torchaudio.transforms.MelSpectrogram(
        sample_rate=SAMPLE_RATE,
        n_fft=1024,
        hop_length=512,
        n_mels=64)
    usd = UrbanSoundDataset(
        ANNOTATIONS_FILE,
        AUDIO_DIR,
        mel_spectrogram,
        SAMPLE_RATE,
        NUM_SAMPLES,
        device
    )

    train_data_loader = create_data_loader(usd, BATCH_SIZE)

    cnn = CNNNetwork().to(device)

    # instantiate loss function + optimiser
    loss_fn = nn.CrossEntropyLoss()
    optimiser = torch.optim.Adam(cnn.parameters(),
                                 lr=LEARNING_RATE)
    # train model
    train(cnn, train_data_loader, loss_fn, optimiser, device,
          EPOCSH)

    # save model
    torch.save(cnn.state_dict(), "feedforwardnet.pth")
    print("Model trained and stored at feedforwardent.pth")
